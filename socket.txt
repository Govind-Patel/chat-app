const io = require('socket.io')(http);
const userc = io.of('/user-name');
userc.on('connection',async function(socket){
    console.log('user connect');

    socket.on('disconnect',async function(){
        console.log('user disconnetion');
      
    });

    
});

const io = require('socket.io')(http);
const userc = io.of('/user-name');
userc.on('connection',async function(socket){
    console.log('user connect');
    var userId = socket.handshake.auth.token;
    await User.findByIdAndUpdate({_id:userId},{ $set:{is_online:1}});

    socket.on('disconnect',async function(){
        console.log('user disconnetion');
        var userId = socket.handshake.auth.token;
        await User.findByIdAndUpdate({_id:userId},{$set:{is_online:'0'}});

    });

    
});

const io = require('socket.io')(http);
const userc = io.of('/user-name');
userc.on('connection',async function(socket){
    console.log('user connect');
    var userId = socket.handshake.auth.token;
    await User.findByIdAndUpdate({_id:userId},{ $set:{is_online:1}});

    //user broadcast online status
    socket.broadcast.emit('getOnlineUser',{user_id:userId});

    socket.on('disconnect',async function(){
        console.log('user disconnetion');
        var userId = socket.handshake.auth.token;
        await User.findByIdAndUpdate({_id:userId},{$set:{is_online:'0'}});

        //user broadcasr offline status
        socket.broadcast.emit('getOfflineUser',{user_id:userId});

    });

     //chating implements ==>this code implements
    socket.on('newChat',function(data){
        socket.broadcast.emit('loadNewChat',data);
    });
});

// dashboard.ejs file code using
 socket.on('loadNewChat',function(data){
      if(sender_id == data.receiver_id && receiver_id == data.sender_id){
        let html = `
            <div class="distance-user-chat">
              <h5 >`+ data.message + `</h5>
            </div>
        `;
        $('#chat-container').append(html);
      }
     
    });